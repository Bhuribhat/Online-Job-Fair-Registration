@startuml Manage Booking (GET ONE)

header Online Job Fair Registration
title "Get a Single Booking (GET ONE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:bookings" as routerBookings
participant "<<middleware>>\n:auth" as auth
participant "<<service>>\n:jwt" as jwt
participant "<<controllers>>\n:bookings" as controllersBookings
participant "<<model>>\n:Booking" as modelBooking
participant "<<model>>\n:User" as modelUser
database "<<Database>>\n:MongoDB" as DatabaseSchema

client->server ++:req.get('/bookings/:id')
server->routerBookings ++:app.use('/bookings/:id', bookings)
routerBookings -> auth ++:protect()
auth -> jwt ++:verify(token, secret)
auth <- jwt --:decoded

alt [Fail]
    client <- auth --:response fail
else [Success]
    auth -> modelUser ++:findById(decoded, id)
    modelUser -> DatabaseSchema ++:UserSchema
    modelUser <- DatabaseSchema --:user
    auth <- modelUser --:req.user
    routerBookings <- auth --:next()
    routerBookings -> controllersBookings ++:getBooking()
    controllersBookings-> modelBooking ++:findById(req.params.id)
    modelBooking -> DatabaseSchema ++: BookingSchema
    DatabaseSchema --> modelBooking --: booking
    controllersBookings <-- modelBooking --:booking
    alt [invalid booking id] or [user is not an admin and does not own this booking]
        controllersBookings -> client --:response fail
    else [Success]
        controllersBookings -> client --:response
    end
end

@enduml